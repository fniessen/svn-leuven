#+TITLE:     SVN aliases
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION: Pretty format for `git log' and different helpful command aliases
#+KEYWORDS:  git, log, pretty format, alias
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2

#+SETUPFILE: ~/.dotfiles/org/theme-readtheorg.setup

#+EXPORT_EXCLUDE_TAGS: noexport

Doc: http://liris.cnrs.fr/seminaires/documents/seminaire_tuto_SVN.pdf

* How to fix "unable to create pristine install stream"

#+begin_src shell
cd .svn
rm -rf tmp
mkdir tmp
#+end_src

* colordiff

Use ~colordiff~ for my ~svn diff~ command (set in =~/.subversion/config=):

#+begin_src shell
diff-cmd = colordiff
#+end_src

* SHOW - View your changes

To *compare all modified files* in your working copy with the ~HEAD~ revision in the
repository, use the following command:

#+begin_src shell
alias svn-diffall="svn status | grep '^M' | awk '{print $2}' | xargs svn diff -r HEAD"
#+end_src

Colored ~svn diff~ command like ~git diff~.

#+begin_src shell
alias svn-diff='svn diff --diff-cmd=colordiff --extensions=" -u --strip-trailing-cr --ignore-space-change " | less --quit-if-one-screen'
#+end_src

#+begin_tip
EXCELLENT option ~--strip-trailing-cr~!
#+end_tip

* SHOW - View the commit history

The following aliases are interesting for using SVN a bit like Git.

** One-line log format ('git log')

See ~svn-log~ in my Shell configuration.

** Make status checks of your working copy easier

Add them to your ~.bashrc~:

#+begin_src shell
alias svnl="svn log -r 1:HEAD -v"       # Show log messages.
alias svnm="svn status -u -q"           # Show locally/repository changed items.
alias svnn="svn status -q"              # Show locally changed items.
alias svns="svn status -u -q -v"        # Show status of all items.
#+end_src

** Show a single revision ('git show')

#+begin_src shell
svn diff -c 4795                        # Or svn diff -r 4795:4792.
#+end_src

See ~svn-show~ and ~svn-showtool~ in my Shell configuration.

** List all the changed files in a commit

Output filenames of files changed in each commit:

#+begin_src shell
svn log -v
#+end_src

See ~svn-changed-files~ in my Shell configuration.

** Show the history of a file

To view all historical changes to a file in SVN:

#+begin_src shell
svn log -q path/to/file | grep "^r" | awk '{print $1}' # List of revisions.
#+end_src

See ~svn-filelog~ in my Shell configuration.

#+begin_src shell
svn log --diff path/to/file
#+end_src

See ~svn-filelog-p~ in my Shell configuration.

* REVERT - Undo things

~svn merge -r 1944:1943 .~ should revert the changes of ~r1944~ in your working
copy. You can then review the changes in your working copy (with diff), but
you'd need to commit in order to apply the revert into the repository.

** "Unmodify" files

To discard local changes in current folder (revert a whole directory of files) :

#+begin_src shell
svn revert -R .
#+end_src

** "Unadd" a file to SVN before commit

: svn rm --keep-local folder_name

because

: svn revert --recursive folder_name

is unsafe, as it looses all local changes.

* Conflicts

Files marked as *conflicted* show up with a C in ~svn status~, and SVN will refuse
to commit such files.

Use ~svn resolved filename~ to mark a conflicted file as resolved:

#+begin_src shell
svn status -q

svn resolve --accept=theirs-full
svn resolved (FILE)

svn status -q
#+end_src

* UPDATE - Pull

http://stackoverflow.com/questions/182945/how-to-see-what-will-be-updated-from-repository-before-issuing-svn-update-comm

Depending on what you want to know between your working copy and the latest SVN
server repository, without updating your local working copy, here is what you
can do:

If you want to know what has been changed in SVN server repository, run command:

#+begin_src shell
svn st -u
#+end_src

If you want to know if the same file has been modified both in your local
working copy and in SVN server repository, run command:

#+begin_src shell
svn st -u | grep -i "^M \{7\}\*"
#+end_src

If you want to get *list of files changed* between a particular revision and ~HEAD~,
run the command:

#+begin_src shell
svn diff -r revisionNumber:HEAD --summarize
#+end_src

If you want to get a list of files changed between particular revisions, run the
command:

#+begin_src shell
svn diff -r revisionNumber:anotherRevisionNumber --summarize
#+end_src

If you want to know what content of a particular file has been changed in SVN
server repository compared with your working copy, run the command:

#+begin_src shell
svn diff -r BASE:HEAD path/to/file
#+end_src

If you want to know what contents of all the files have been changed in SVN
server repository compared with your working copy, run the command:

#+begin_src shell
svn diff -r BASE:HEAD .
#+end_src

If you want to get a *list of all files that were changed on the branch* (created,
say, at revision 22334) compared to what's on the trunk (without seeing files
that were changed on the trunk between when the branch was created and "now"):

#+begin_src shell
svn diff -r 22334:HEAD --summarize <url of the branch>
#+end_src

** Check for incoming changes

Show which files are modified in the repository (with an ~*~):

#+begin_src shell
alias svn-incoming='svn status -u | grep \*'
#+end_src

#+begin_src shell
svn log -r BASE:HEAD                    # Equivalent of `git log'
svn log --diff -r BASE:HEAD             # Equivalent of `git log -p'
#+end_src

** Preview incoming changes

See what has been changed (how it's different from my working copy):

#+begin_src shell
svn diff -r BASE:HEAD
#+end_src

** Checkout a specific older version of the source code

Assuming that the source has already been checked out (that is you have an
already existing folder...), update the revision (say we want to get r4732):

#+begin_src shell
svn update -r 4732
#+end_src

* Ignore files

Edit the file ignoring.txt to put the files you want actually to ignore. Then
use this one to ignore the files listed in the file:

: svn propset svn:ignore -F ignoring.txt .

Note the dot at the end of the line. It tells SVN that the property is being set
on the current directory.

Delete the file:

: rm ignoring.txt

Finally commit,

: svn ci --message "Ignore some files"

You can then check which files are ignored via:

: svn proplist -v

* PUBLISH - Prepare a release

SVN diff zip revision to deploy.

Make release package (get list of changed files via ~svn diff~ log and zip them):

svn-rev-patch:

#+begin_src shell
# For one release only.
svn diff -c 124 --summarize | cut -c 9- | xargs zip -9 commit-124.zip

# For a range of releases (124 up to and INCLUDING 145).
svn diff -r 123:145 --summarize | cut -c 9- | xargs zip -9 commit-124-145.zip
#+end_src

#+begin_note
~-c REV~ is equivalent to ~-r REV-1:REV~.
#+end_note

This will create a ZIP file with the changed file(s) -- in an intact directory
structure -- from revision ~123:HEAD~.
